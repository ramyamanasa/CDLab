Lab 10: Code Generation Introduction to MIPS Assembly language-
(Teach SPIM MIPS simulator).
 To learn the basics of MIPS Assembly Language
 Introduction:
• MIPS (Million Instructions Per Second) is a RISC (Reduced Instruction Set Computer)
instruction set architecture developed by MIPS Technologies in the late 1980s.
• It is a loadstore architecture, meaning that data must be loaded into registers before it c
an be processed. MIPS is known for its simplicity, efficiency, and high performance.
• It has been widely used in embedded systems, networking equipment, andother applica
tions where performance and power consumption are critical.

 Algorithm:
Step 1: get value for register $a0
Step 2: get value for register $a1
Step 3: add values in $a0 and $a1
Step 4: store result in register $v0
Step 5: print value in register $v0


 Sample Code:
.data
num1: .word 10
num2: .word 5
.text
main:
 # load num1 into $a0
 lw $a0, num1
 # load num2 into $a1
 lw $a1, num2
 # add num1 and num2
 add $v0, $a0, $a1
 # print result
 li $v0, 1 # syscall code for print_int
 syscall
 # exit program
 li $v0, 10 # syscall code for exit
syscall

 Output: 15

 How To Run:
• Open MARS MIPS Simulator.
• Click "File" -> "Open" and select your MIPS assembly file.
• Click "Assemble" to assemble the file.
• Click "Run" to execute the program.
