Write an Intermediate code generation for If/While.
Create a method takes two strings as input: condition represents the condition of the if
statement, and action represents the action to be performed if the condition is true.
• Inside the generateIfCode method, a StringBuilder is used to construct the code.
• The condition and action strings are concatenated to form the if statement block.
• Finally, the generated code is returned as a string.
can customize this code by providing different conditions and actions to generate code for
different if statements. Additionally, can extend this algorithm to handle more complex ifelse or nested if statements as needed.



import java.util.*;
public class CodeGenerationForIf {
 public static void main(String[] args) {
 // Example input: if (x > 5) { y = x * 2; }
 String condition = "x > 5";
 String action = "y = x * 2;";
 // Generate code for the if statement
 String generatedCode = generateIfCode(condition, action);
 System.out.println("Generated code:");
 System.out.println(generatedCode);
 }
 public static String generateIfCode(String condition, String action) {
 StringBuilder codeBuilder = new StringBuilder();
 // Add the if statement
codeBuilder.append("if (").append(condition).append(") {\n");
 // Add the action inside the if block
 codeBuilder.append("\t").append(action).append("\n");
 // Close the if block
 codeBuilder.append("}");
 return codeBuilder.toString();
 }
}

OUTPUT:
Generated code:
if (x > 5) {
 y = x * 2;
}


C++ Code 

include <iostream>
#include <string>

using namespace std;

// Function to generate intermediate code for if-else statements
void generateIntermediateCodeIfElse(const string& condition, const string& trueBlock, const string& falseBlock = "") {
    cout << "Intermediate Code for if-else statement:" << endl;
    cout << "if (" << condition << ") {" << trueBlock << "}" << endl;
    if (!falseBlock.empty()) {
        cout << "else {" << falseBlock << "}" << endl;
    }
}

// Function to generate intermediate code for while loops
void generateIntermediateCodeWhile(const string& condition, const string& loopBlock) {
    cout << "Intermediate Code for while loop:" << endl;
    cout << "while (" << condition << ") {" << loopBlock << "}" << endl;
}

int main() {
    string ifCondition, ifTrueBlock, ifFalseBlock, whileCondition, whileBlock;

    // Get inputs for if-else statement
    cout << "Enter the condition for if-else statement: ";
    getline(cin, ifCondition);
    cout << "Enter the true block for if statement: ";
    getline(cin, ifTrueBlock);
    cout << "Enter the false block for else statement (press Enter if no else block): ";
    getline(cin, ifFalseBlock);

    // Generate intermediate code for if-else statement
    generateIntermediateCodeIfElse(ifCondition, ifTrueBlock, ifFalseBlock);

    cout << endl;

    // Get inputs for while loop
    cout << "Enter the condition for while loop: ";
    getline(cin, whileCondition);
    cout << "Enter the block for while loop: ";
    getline(cin, whileBlock);

    // Generate intermediate code for while loop
    generateIntermediateCodeWhile(whileCondition, whileBlock);

    return 0;
}
